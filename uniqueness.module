<?php
// $Id$

/**
 * @file uniqueness.module
 */

define('UNIQUENESS_SEARCH_MODE_NODETITLE', 0x01);
define('UNIQUENESS_SEARCH_MODE_DRUPAL', 0x02);
define('UNIQUENESS_SEARCH_MODE_SOLR', 0x03);

define('UNIQUENESS_WIDGET_INLINE', 0x01);
define('UNIQUENESS_WIDGET_BLOCK', 0x02);

/**
 * Implementation of hook_menu().
 */
function uniqueness_menu() {
  $items['uniqueness-search'] = array(
    'title' => 'Uniqueness search',
    'page callback' => 'uniqueness_dynamic_callback',
    'access arguments' => array('use uniqueness widget'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/uniqueness'] = array(
    'title' => 'Uniqueness',
    'description' => 'Configure the behaviour and appearance of the uniqueness widget.',
    'file' => 'uniqueness.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uniqueness_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uniqueness_perm() {
  return array('use uniqueness widget');
}

// @todo hook_help().

/**
 * Implementation of hook_content_extra_fields().
 *
 * Allows the inline uniqueness field to be sorted on the manage fields page if
 * CCK is installed.
 */
function uniqueness_content_extra_fields() {
  // Check that the inline widget is enabled
  $widget_types = variable_get('uniqueness_widgets', array(UNIQUENESS_WIDGET_INLINE));
  if (!in_array(UNIQUENESS_WIDGET_INLINE, $widget_types))
    return array();

  $extras['uniqueness'] = array(
    'label' => t('@title', array('@title' => variable_get('uniqueness_default_title', t('Related content')))),
    'description' => t('Uniqueness inline widget.'),
  );

  return $extras;
}

/**
 * Implementation of hook_form_alter().
 */
function uniqueness_form_alter(&$form, $form_state, $form_id) {
  // Select node types to search for similarites.
  if ($form_id == 'node_type_form') {
    // @todo put this in submission form settings
    $form['uniqueness'] = array(
      '#type' => 'fieldset',
      '#title' => t('Uniqueness'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['uniqueness']['uniqueness_type'] = array(
      '#type' => 'checkbox',
      '#title' => t('Provide uniqueness search'),
      '#description' => t('Shows similar content during new content creation to avoid duplicates.'),
      '#default_value' => variable_get('uniqueness_' . $form['#node_type']->type, FALSE),
    );
    // Add our submit handler.
    $form['#submit'][] = '_uniqueness_node_type_submit';
  }
  // Attach submit handler to types and add js.
  elseif (strpos($form_id, 'node_form') !== FALSE && arg(1) == 'add') {
    $type = $form['type']['#value'];
    $on = variable_get('uniqueness_' . $type, FALSE);
    if ($on) {
      // Add our javascript.
      _uniqueness_add_search_javascript();

      // embed inline widget if enabled
      if (uniqueness_widget_enabled(UNIQUENESS_WIDGET_INLINE)) {
        $form['uniqueness'] = array(
          '#type' => 'fieldset',
          '#title' => t('@title', array('@title' => variable_get('uniqueness_default_title', t('Related content')))),
          '#collapsible' => 1,
          '#collapsed' => 0,
          '#weight' => $form['title']['#weight'] + 1, // place underneith title
        );
        $form['uniqueness']['uniqueness_type'] = array(
          '#type' => 'item',
          '#title' => '',
        );
        $form['uniqueness']['uniqueness_type']['#value'] = uniqueness_widget_content();
      }

      // Add our submit handler.
      $form['#submit'][] = '_uniqueness_node_add_submit';
}
  }
}

/**
 * Helper function checks whether a widget is enabled.
 *
 * @param $widget
 *   Widget identifier, either UNIQUENESS_WIDGET_INLINE or UNIQUENESS_WIDGET_BLOCK
 *
 * @return
 *   TRUE if the widget is enabled, FALSE otherwise.
 */
function uniqueness_widget_enabled($widget) {
  $widget_types = variable_get('uniqueness_widgets', array(UNIQUENESS_WIDGET_INLINE));
  return in_array($widget, $widget_types);
}

/**
 * Generates and embeds javascript code required for the uniqueness search.
 */
function _uniqueness_add_search_javascript() {
  drupal_add_js(drupal_get_path('module', 'uniqueness') . '/uniqueness.js');
  $search_url = base_path() . 'uniqueness-search/' . $type;
  $settings = array(
    'URL' => $search_url,
    'preview' => FALSE,
    'prependResults' => variable_get('uniqueness_results_prepend', 0) == 1 ? TRUE : FALSE,
  );
  if (!empty($form_state['node_preview'])) {
    $settings['preview'] = TRUE;
  }
  drupal_add_js(array('uniqueness' => $settings), 'setting');
}

/**
 * Custom submit handler for the node type form.
 */
function _uniqueness_node_type_submit($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['uniqueness_type'] == 1) {
    variable_set('uniqueness_' . $values['type'], TRUE);
  }
  else {
    variable_set('uniqueness_' . $values['type'], FALSE);
  }
}

/**
 * Custom submit handler for the node add form.
 */
function _uniqueness_node_add_submit($form, &$form_state) {
  // We only look for similar content if the Preview button was clicked.
  if ($form_state['clicked_button']['#id'] == 'edit-preview') {
    $values = $form_state['values'];
    $store = array();
    // Store the title.
    if (!empty($values['title'])) {
      $store['title'] = strip_tags($values['title']);
    }
    // Store the tags.
    if (!empty($values['taxonomy']['tags'][1])) {
      $store['tags'] = strip_tags($values['taxonomy']['tags'][1]);
    }
    if (!empty($store)) {
      _uniqueness_store($store);
    }
  }
}

/**
 * Helper function solves FAPI deficiency by storing some data statically for retrieval in our block.
 */
function _uniqueness_store($values = array()) {
  static $uniqueness_store  = array();
  if (!empty($values)) {
    $uniqueness_store = $values;
  }
  return $uniqueness_store;
}

/**
 * Implementation of hook_block().
 */
function uniqueness_block($op = 'list', $delta = 0, $edit = array()) {
  // Check that the block widget is enabled
  if (!uniqueness_widget_enabled(UNIQUENESS_WIDGET_BLOCK)) return;

  if ($op == 'list') {
    // @todo I think we can cache the block actually -- explore.
    $blocks['uniqueness'] = array(
      'info' => t('Uniqueness search'),
      'cache' => BLOCK_NO_CACHE,
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    // We only operate on the node add page for a type we search.
    if (user_access('use uniqueness widget') && $delta == 'uniqueness' && arg(0) == 'node' && arg(1) == 'add') {
      $on = variable_get('uniqueness_' . arg(2), FALSE);
      if ($on) {
        $block['subject'] = t('@title', array('@title' => variable_get('uniqueness_default_title', 'Related content')));
        $block['content'] = uniqueness_widget_content();
        return $block;
      }
    }
  }
}

/**
 * Content of our block.
 */
function uniqueness_widget_content() {
  $output = '';
  $description = t('!description', array('!description' => filter_xss(variable_get('uniqueness_default_description',
      "Help us increase the signal to noise ratio! If we find content that's related or similar to what you're posting it will be listed here."))));
  if (!empty($description)) $output .= "<p>" . $description . "</p>";
  $output .= '<div class="uniqueness-dyn">';
  // If we have stored values we've previewed the post.
  $values = _uniqueness_store();
  if (!empty($values)) {
    $content = uniqueness_content($values);
    if (!empty($content)) {
      // Show list of content to user.
      $links = theme('related_content_list', $content);
      $output .= $links;
    }
  }
  $output .= '</div>';
  return $output;
}

/**
 * Callback for uniqueness-search returns HTML stubs for related content.
 */
function uniqueness_dynamic_callback($type = '', $string = '') {
  // Build $values from $string.
  $values = array();
  // @todo refer to tags as 'terms'
  if ($_GET['tags']) {
    $values['tags'] = strip_tags($_GET['tags']);
  }
  if ($_GET['title']) {
    $values['title'] = strip_tags($_GET['title']);
  }
  if (!empty($values)) {
    $related_content = uniqueness_content($values);
  }
  if (!empty($related_content)) {
    $items = array();
    foreach ($related_content as $nid => $item) {
      // Build items and avoid duplicates.
      if (!in_array($nid, array_keys($items))) {
        $items[$nid] = $item;
        $items[$nid]['href'] = url('node/' . $nid);
      }
    }
    drupal_json($items);
  }
  else {
    drupal_json('false');
  }
  return;
}

/**
 * Perform lookup of related or similar content.
 */
function uniqueness_content($values) {
  $search_mode = variable_get('uniqueness_search_mode', UNIQUENESS_SEARCH_MODE_NODETITLE);
  switch ($search_mode) {
    case UNIQUENESS_SEARCH_MODE_NODETITLE:
      return _uniqueness_content_nodetitle($values);
    case UNIQUENESS_SEARCH_MODE_DRUPAL:
      return _uniqueness_content_drupalsearch($values);
    case UNIQUENESS_SEARCH_MODE_SOLR:
      return _uniqueness_content_solr($values);
  }
  return $related_content;
}

/**
 * Searches for related content by comparing the node title with the title of
 * existing nodes.
 */
function _uniqueness_content_nodetitle($values) {
  $related_content = array();
  // Query node table.
  if ($values['title']) {
    $sql = "SELECT n.nid, n.title FROM {node} n WHERE LOWER(n.title) LIKE LOWER('%%%s%') AND n.status = 1";
    // @todo types
    $result = db_query(db_rewrite_sql($sql), $values['title']);
    while ($row = db_fetch_array($result)) {
      $related_content[$row['nid']] = $row;
    }
  }

  return $related_content;
}

/**
 * Searches for related content using the drupal core search module.
 */
function _uniqueness_content_drupalsearch($values) {
  // Check that the core search module is available
  if (!module_exists('search')) {
    drupal_set_message(t('Search module not found. Please enable the search module or select a different search mode on the uniqueness configuration page.'), 'warning');
    return array();
  }

  // build search string
  // @todo add types by adding e.g. type:blog
  $searchstring = join(' OR ', split(' ', $values['title']));
  $search_results = node_search('search', $searchstring);

  $related_content = array();
  foreach ($search_results as $result) {
      $item = array();
      // Title has already been filtered.
      $item['html'] = TRUE;
      $item['nid'] = $result['node']->nid;
      $item['title'] = $result['title'];
      $related_content["{$result['node']->nid}"] = $item;
  }

  return $related_content;
}

/**
 * Searches for realted content using the apachesolr module.
 */
function _uniqueness_content_solr($values) {
  // Check that the apachesolr module is available
  if (!module_exists('apachesolr_search')) {
    drupal_set_message(t('Solr search module not found. Please select a different search mode on the uniqueness configuration page.'), 'warning');
    return array();
  }

  $related_content = array();

  // Search discussion types first.
  // @todo generalize types
  foreach (array('discussion', 'local_discussion') as $type) {
    $filter = 'type:' . $type;
    // Search title.
    if ($values['title']) {
      $title_content = uniqueness_solr($values['title'], $filter);
      if (!empty($title_content)) {
        $related_content = array_merge($related_content, $title_content);
      }
    }
    // Search tags.
    if ($values['tags']) {
      $tags = explode(',', $values['tags']);
      foreach ($tags as $tag) {
        $results = uniqueness_solr(trim($tag), $filter);
        if (!empty($results)) {
          $related_content = array_merge($related_content, $results);
        }
      }
    }
  }
  return $related_content;
}

function uniqueness_solr($string, $filter) {
  $related_content = array();
  try {
    $solr_results = apachesolr_search_execute($string, $filter, '', '', 0, 'uniqueness');
    foreach ($solr_results as $result) {
      $item = array();
      // Title has already been filtered.
      $item['html'] = TRUE;
      $item['nid'] = $result['node']->nid;
      $item['title'] = $result['title'];
      $related_content["{$result['node']->nid}"] = $item;
    }
  }
  catch (Exception $e) { 
    watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR); 
  }
  return $related_content;
}

/**
 * Implementation of hook_apachesolr_prepare_query().
 */
function uniqueness_apachesolr_prepare_query(&$query, &$params, $caller) {
  if ($caller == 'uniqueness') {
    // Tell Solr we only have to match on one word.
    $params['mm'] = 1;
  }
}

/**
 * Implementation of hook_theme().
 */
function uniqueness_theme($existing, $type, $theme, $path) {
  return array(
    'related_content_list' => array(
      'arguments' => array('content' => NULL),
    ),
  );
}

/**
 * Theme function returns list of links.
 *
 * Note, $content can contain unsanitized content from the database.
 */
function theme_related_content_list($content) {
  $items = array();
  foreach ($content as $nid => $item) {
    // Avoid duplicates.
    if (!in_array($nid, array_keys($items))) {
      // Storage.
      $items[$nid] = $item;
      $options = array('html' => $item['html'], 'attributes' => array('target' => '_blank'));
      $links[] = l($item['title'], 'node/' . $item['nid'], $options);
    }
  }
  return theme('item_list', $links);
}